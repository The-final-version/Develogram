plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ["-parameters"]
}

group = 'com.goorm'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    //JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    //Thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    //Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    //swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.5'
    //mysql
    runtimeOnly 'com.mysql:mysql-connector-j'
    //security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    //MariaDB
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    //mockito
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    //spring security test
    testImplementation 'org.springframework.security:spring-security-test'
    //validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    //batch
    implementation 'org.springframework.batch:spring-batch-core'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    implementation 'io.github.cdimascio:dotenv-java:3.0.0'

    // H2 데이터베이스 의존성
    runtimeOnly 'com.h2database:h2'
}

jacoco {
    toolVersion = "0.8.10"
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport

    testLogging {
        events "passed", "failed", "skipped"
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}

jacocoTestCoverageVerification {
    dependsOn test

    classDirectories.setFrom(
            files(
                    fileTree("$buildDir/classes/java/main") {
                        include 'com/goorm/clonestagram/feed/**'
                        include 'com/goorm/clonestagram/follow/**'
                        exclude '**/dto/**'
                        exclude '**/config/**'
                        exclude '**/mapper/**'
                    }
            )
    )

    violationRules {
        rule {
            element = 'CLASS'
            includes = ['com.goorm.clonestagram..*']

            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.75
            }
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.70
            }
        }
    }
}


jacocoTestReport {
    dependsOn test

    reports {
        xml.required = true
        csv.required = false
        html.outputLocation.set(layout.buildDirectory.dir("jacocoHtml"))
    }

    classDirectories.setFrom(
            files(
                    fileTree("$buildDir/classes/java/main") {
                        include 'com/goorm/clonestagram/feed/**'
                        include 'com/goorm/clonestagram/follow/**'
                        exclude '**/mapper/**'
                        exclude '**/dto/**'
                        exclude '**/mapper/**'
                    }
            )
    )
}

check.dependsOn jacocoTestCoverageVerification
