plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'com.goorm'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    // Web
    implementation 'org.springframework.boot:spring-boot-starter-web'

    //JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    //Thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    //Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    //swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.5'
    //mysql
    runtimeOnly 'com.mysql:mysql-connector-j'
    //security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // H2 Database (Runtime)
    runtimeOnly 'com.h2database:h2'

    //MariaDB
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    //mockito
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    //validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    //batch
    implementation 'org.springframework.batch:spring-batch-core'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    implementation 'io.github.cdimascio:dotenv-java:3.0.0'

    // Spring Data Redis (추가)
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    // Redisson (추가)
    implementation 'org.redisson:redisson-spring-boot-starter:3.27.2' // 버전 확인 필요

    // Cloudinary
    implementation 'com.cloudinary:cloudinary-http44:1.38.0'
    implementation 'com.cloudinary:cloudinary-taglib:1.38.0'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Test Hamcrest (추가)
    testImplementation 'org.hamcrest:hamcrest-library:2.2' // 버전은 최신 버전 확인 후 조정 가능
}

jacoco {
    toolVersion = "0.8.10"
}
tasks.withType(JavaCompile) {
    options.compilerArgs += ['-parameters']
}
test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport

    // Mockito 에이전트 사용을 위한 JVM 인수 추가
    jvmArgs "-javaagent:${classpath.find { it.name.contains('byte-buddy-agent') }.absolutePath}"

    testLogging {
        events "passed", "failed", "skipped"
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}

jacocoTestCoverageVerification {
    dependsOn test

    classDirectories.setFrom(
            files(
                    fileTree("$buildDir/classes/java/main") {
                        include 'com/goorm/clonestagram/**'
                        exclude '**/dto/**'
                        exclude '**/config/**'
                        exclude '**/mapper/**'
                    }
            )
    )

    violationRules {
        rule {
            element = 'CLASS'
            includes = ['com.goorm.clonestagram..*']

            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.75
            }
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.70
            }
        }
    }
}


jacocoTestReport {
    dependsOn test

    reports {
        xml.required = true
        csv.required = false
        html.outputLocation.set(layout.buildDirectory.dir("jacocoHtml"))
    }

    classDirectories.setFrom(
            files(
                    fileTree("$buildDir/classes/java/main") {
                        include 'com/goorm/clonestagram/'
                        exclude '**/mapper/**'
                        exclude '**/dto/**'
                        exclude '**/mapper/**'
                    }
            )
    )
}

check.dependsOn jacocoTestCoverageVerification

tasks.register("followTest", Test) {
    useJUnitPlatform()
    include '**/FollowIntegrationTest.class'
}

tasks.register("followCoverage", JacocoReport) {
    dependsOn 'followTest'
    executionData fileTree(buildDir).include("**/jacoco/*.exec")
    reports {
        html.required = true
        xml.required = true
    }
    classDirectories.setFrom(
            files([
                    fileTree(dir: "$buildDir/classes/java/main", include: [
                            "com/goorm/clonestagram/follow/**",
                    ])
            ])
    )
    sourceDirectories.setFrom files("src/main/java")
}
